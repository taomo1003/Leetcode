package leetcoder;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class no_22 {
	private HashSet<String> hashSet = new HashSet<>();
	private List<String> result = new ArrayList<>();
    public List<String> generateParenthesis(int n) {
    	if(n == 0) return result;
        solve("", n);
        return result;
    }
    
    public void solve(String curr, int n) {
		if (n == 0) {if (hashSet.contains(curr)) return;
			hashSet.add(curr);
			result.add(curr); return;}
		solve(curr+"()", n-1);
		solve("()"+curr, n-1);
		solve("("+curr+")", n-1);
		//wrong because (())(()) cannot generated by the algorithm!!
	}
    
    public static void main(String[] args) {
		no_22 test = new no_22();
		System.out.println(test.generateParenthesis(4));
	}
}


//public List<String> generateParenthesis(int n) {
//    List<String> list = new ArrayList<String>();
//    backtrack(list, "", 0, 0, n);
//    return list;
//}
//
//public void backtrack(List<String> list, String str, int open, int close, int max){
//    
//    if(str.length() == max*2){
//        list.add(str);
//        return;
//    }
//    
//    if(open < max)
//        backtrack(list, str+"(", open+1, close, max);
//    if(close < open)
//        backtrack(list, str+")", open, close+1, max);
//}